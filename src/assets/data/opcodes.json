{
    "codes": [
        {
            "code": "after",
            "fields": {
                "name": "Class Name",
                "opcode": "Opcode"
            },
            "description": "The specified opcode is further constrained in that the matched character sequence must be immediately preceded by a character belonging to the specified class. If this opcode is used more than once on the same line then the union of the characters in all the classes is used."
        },
        {
            "code": "always",
            "fields": {
                "unicode": "Input Character",
                "dots": "Braille for above character"
            },
            "description": "Replace the characters with the dot pattern no matter where they appear. Do NOT use an entry such as always a 1. Use the character definition opcodes instead."
        },
        {
            "code": "attribute",
            "fields": {
                "name": "attribute name",
                "unicode": "Enter Character"
            },
            "description": "Add characters to a character class. The class may be one of the predefined classes listed above, a user-defined class previously created with this opcode, or a new one. The name operand must contain only letters (a-z and A-Z, case matters). For historical reasons and to support the match opcode (see match) it can also be a number between 0 and 7. The characters operand must be specified as a string. Each character in the string, as well as its dot counterpart if it occupies a single cell, is added to the character class."
        },
        {
            "code": "base",
            "fields": {
                "base_attribute": "attribute name",
                "unicode_1": "Base Character",
                "unicode_2": "Derived Character"
            },
            "description": "This opcode is different in that it does not associate a character with a dot pattern, but it associates a character with another already defined character. The derived character inherits the dot pattern of the base character, and braille indicators (see Braille Indicator Opcodes) are used to distinguish them. The attribute operand refers to the character class (see Character-Class Opcodes) to which the character should be added. By defining braille indicator rules associated with this character class, you can determine the braille indicators to be inserted. "
        },
        {
            "code": "before",
            "fields": {
                "name": "Class Name",
                "opcode": "Select Opcode"
            },
            "description": "The specified opcode is further constrained in that the matched character sequence must be immediately followed by a character belonging to the specified class. If this opcode is used more than once on the same line then the union of the characters in all the classes is used."
        },
        {
            "code": "begcaps",
            "fields": {
                "dots": "Braille"
            },
            "description": "The dot pattern which indicates that a mode is entered until it is terminated by a endmode indicator. It is used in some Braille codes to mark a whole sentence or several words as capital letters. The block can contain capital letters as well as non-alphabetic characters, punctuation, numbers etc. This is the most general opening mark, i.e. it can be used for opening at any position."
        },
        {
            "code": "begcapsword",
            "fields": {
                "dots": "Braille"
            },
            "description": "The dot pattern which indicates that a certain mode is entered for the following word or remainder of the current word. The mode is automatically terminated by the first character that is not a letter. For uppercase mode, you can define a list of characters that can appear within a word in capitals without terminating the block. Do this by using the capsmodechars opcode"
        },
        {
            "code": "begcomp",
            "fields": {
                "dots": "Braille"
            },
            "description": "This braille indicator is placed before a sequence of characters translated in computer braille, whether this sequence is indicated in the typeform parameter (see typeform parameter) or inferred because it contains a subsequence specified by the compbrl opcode"
        },
        {
            "code": "begemph",
            "fields": {
                "name": "Emphasis class",
                "dots": "Dot Pattern"
            },
            "description": "Braille dot pattern to indicate the beginning of emphasis. A begemph rule must always be combined with a endemph rule."
        },
        {
            "code": "begemphphrase",
            "fields": {
                "name": "Emphasis class",
                "dots": "Dot Pattern"
            },
            "description": "Braille dot pattern to indicate the beginning of a phrase. A begemphphrase rule must always be combined with a endemphphrase rule."
        },
        {
            "code": "begemphword",
            "fields": {
                "name": "Emphasis class",
                "dots": "Dot Pattern"
            },
            "description": "Braille dot pattern to indicate the beginning of an emphasized word or the beginning of emphasized characters within a word."
        },
        {
            "code": "begmidword",
            "fields": {
                "unicode": "Enter Characters",
                "dots": "Dot Pattern"
            },
            "description": "Replace the characters with the dot pattern if they are either at the beginning or in the middle of a word."
        },
        {
            "code": "endemph",
            "fields": {
                "name": "Emphasis class",
                "dots": "Dot Pattern"
            },
            "description": "Braille dot pattern to indicate the end of emphasis."
        },
        {
            "code": "space",
            "fields": {
                "unicode": "Input Character",
                "dots": "Braille for above character"
            },
            "description": "Whitespace characters such as blank and tab"
        }
    ]
}